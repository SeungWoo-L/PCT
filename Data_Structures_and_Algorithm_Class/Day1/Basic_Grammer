### 파이썬의 객체, 변수는 클래스이다
### 변수는 id값을 가져오는 것이다(즉 변수는 객체를 가르키는 중) 
// C, C++과 차이점 , C종류 언어는 변수 메모리에 값을 직접 할당한다 //
### 따라서 두 값을 swap할때 temp변수가 필요 없다
#
#
'''
a = 10
print(a) === 10
b = 10.5
print(b) === 10.5

a = b = 50
id(a) == id(b) === 둘다 50 값을 할당받은게 아닌 50 객체를 가르키고 있음

print(a is b) === True
print(a is not b) === False
'''

'''
### 각 2,8,10,16 진법 변환법

print(int('00000010', 2))
print(int('00000010', 8))
print(int('00000010', 10))
print(int('00000010', 16))

print(bin(10))
print(oct(10))
print(hex(10))
'''

### 문자열 보간 법

# 옛날 스타일 - %
# 새 스타일 - {} , format 메소드
# 최신 스타일 - f-문자열 === 메인
'''
print('%d 와 %d 의 합은 %d 입니다.' % (x, y, sum))

print('{} 와 {} 의 합은 {} 입니다.'.format(x, y, sum))

print(f'{x} 와 {y} 의 합은 {sum} 입니다.')  === 최신 스타일
'''

### 여러개의 데이터를 입력 받을 때
### map 내장 함수: 반복 가능한 객체(iterable)의 요소를 지정된 함수로 처리해주는 함수
'''
print('두 개의 정수를 입력하세요: ', end='')

x, y = map(int, input().split()) === Enter기준으로 입력 받음 , 2개

# x, y = list(map(int, input().split())) === 리스트 변환 가능
'''
# f-문자열: 문자열에 데이터를 포함하여 문자열 출력
'''
a = 12345
print(f'[{a}]')
# print(f'[{a:d}]')
print(f'[{a:#o}]')
print(f'[{a:#x}]')
# print(f'[{a:8d}]')
print(f'[{a:8}]')
print(f'[{a:08}]')
print(f'[{a:+8}]')
print(f'[{a:+08}]')

# 왼쪽 정렬(<), 오른쪽 정렬(>), 가운데 정렬(^)
print(f'[{a:<8}]')
print(f'[{a:0>8}]')
print(f'[{a:#^8}]')
b = 3.14159
print(f'[{b}]')# 3.14159
print(f'[{b:f}]')# 3.141590
print(f'[{b:.2f}]')# 소수점 2번째 자리(.2)까지
print(f'[{b:8.4f}]')# 출력할 최소 자릿수(8)
print(f'[{b:e}]')# 부동 소수점 표기법
print(f'[{b:g}]')# %f 와 %e 중에서 더 짧은 표현 선택

# ValueError: Unknown format code 'c' for object of type 'str'
# print(f'[{"P':c}]")
# print(f'[{"Python':c}]")
print(f'[{"P"}]')# print(f'[{"P"}]')
print(f'[{"Python"}]')# print(f'[{"Python":s}]')
print(f'[{"Python":10s}]')
print(f'[{"Python":10.2s}]')

출력값 예상해볼 것
'''

# 리스트 생성
sList = [ 10, 20, 30, 40, 50 ]
# 리스트 객체의 개별 항목 접근: 순방향
sList[0]
# 10
sList[1]
# 20
sList[2]
# 30
sList[3]
# 40
sList[4]
# 50
sList[5]
# IndexError: list index out of range
# 리스트 객체의 개별 항목 접근: 역방향
sList[-1]
# 50
sList[-2]
# 40
sList[-3]
# 30
sList[-4]
# 20
sList[-4]
# 10
'''
### 리스트 순회법, 반복문 (for, while)
'''
# 리스트 객체 생성
sList = [ 10, 20, 30, 40, 50 ]
# 리스트 객체의 전체 항목 순회: 반복문(for)
for str in sList :
    print(str)
for i in range(len(sList)) :
    print(sList[i])
# List Comprehension
[ print(str) for str in sList ]

# 리스트 객체 생성
sList = [ 10, 20, 30, 40, 50 ]
# 리스트 객체의 전체 항목 순회: 반복문(while)
i = 0
while i < len(sList):
    print(sList[i])
    i += 1
'''
### 리스트 슬라이싱 
'''
# 리스트 객체 생성
sList = [ 10, 20, 30, 40, 50 ]
# 리스트 객체의 부분 원소 접근
sList[:]    # [ 10, 20, 30, 40, 50 ]
sList[0:5]  # [ 10, 20, 30, 40, 50 ]
sList[:4]   # [ 10, 20, 30, 40 ]
sList[1:]   # [ 20, 30, 40, 50 ]

# sList = [ 10, 20, 30, 40, 50 ]
sList[1] = 60               # [ 10, 60, 30, 40, 50 ]
sList[1:3] = [ 70, 80 ]     # [ 10, 70, 80, 40, 50 ]
sList[1:2] = [ 90, 99 ]     # [ 10, 90, 99, 80, 40, 50 ]
sList[1:3] = [ 88 ]         # [ 10, 88, 80, 40, 50 ]
'''
'''
### 리스트 복사
### 동일한 리스트 객체를 참조하는 객체 생성
# 기존 리스트 객체를 복사하여, 동일한 객체를 참조
a = [ 10, 20, 30, 40, 50 ]
b = a
a is b          # True

### 자신만의 값을 가지는 새로운 객체 생성
# 기존 리스트 객체를 복사하여, 자신만의 값을 가지는 새로운 객체 생성
a = [ 10, 20, 30, 40, 50 ]
b = a[:]            # 1 슬라이싱 [:]
c = a.copy()        # 2 리스트 조작 함수(copy)
d = list(a)         # 3 list 내장 함수
a is b              # False
a is c              # False
a is d              # False

'''

### 예제 0-4: 파이썬 내장 함수와 리스트 조작 함수
# 리스트 객체 생성
sList = [10, 20, 30, 40, 50]
# 내장 함수: len
print(f'전체 원소: {sList}') === 5
print(f'전체 원소 개수: {len(sList)}') === 5

# 리스트 조작 함수(append): 리스트 맨 마지막 원소로 추가
sList.append(60)    === 끝에 60 추가
sList.append(70)    ===  '' 70 ''

# 내장 함수: len
print(f'전체 원소: {sList}')    === [10, 20, 30, 40, 50, 60, 70]
print(f'전체 원소 개수: {len(sList)}')  === 7

# 리스트 조작 함수(count): 특정 원소의 총 개수
print(f'데이터 10의 총 개수: {sList.count(10)}')    === 1
print(f'데이터 20의 총 개수: {sList.count(20)}')    === 1
print(f'데이터 30의 총 개수: {sList.count(30)}')    === 1

# 내장 함수: len, sum
print(f'전체 원소 합계: {sum(sList)}')  === 280
print(f'전체 원소 평균: {sum(sList)/len(sList)}')   === 40.0

# 내장 함수: max, min
print(f'전체 원소 최댓값: {max(sList)}')    === 70
print(f'전체 원소 최솟값: {min(sList)}')    === 10


### 튜플(Tuple): 튜플 생성 및 초기화
### 하나의 항목을 가진 튜플 생성
### 항목이 하나만 있는 튜플을 만들려면 항목 뒤에 쉼표를 추가해야 합니다. 그렇지
### 않으면 파이썬은 이를 튜플로 인식하지 못한다.
aTuple = ('apple', ) <-- 끝에 쉼표 주목!!!
print(type(aTuple))     # <class 'tuple'>

# NOT a tuple
bTuple = ('apple')
print(type(bTuple))     # <class 'str’>

cTuple = (10)
print(type(cTuple))     # <class 'int＇>


### 딕셔너리(Dirctionary): { }
# 딕셔너리 객체 생성
aDict = {}
bDict = dict()          # dict 내장 함수

# 딕셔너리 객체 생성
carDict = {
    'brand': 'HYUNDAI',
    'model': 'IONIQ',
    'year': 2024
}
# 딕셔너리 객체의 키에 대한 이름으로 참조한다.
print(type(carDict))            # <class 'dict'>
print(carDict['brand'])         # HYUNDAI
print(carDict.get('brand'))     # HYUNDAI

### 셋(Set): { }
### 값은 버리고, 키만 남은 딕셔너리와 같다.
### 딕셔너리와 마찬가지로 각 키들은 반드시 고유해야 한다.
### 즉, 중복되는 키는 저장되지 않는다.
### 단일 변수에 여러 항목을 지정하는데 사용된다.
### 셋은 순서가 없고, 변경할 수 없고, 인덱싱 되지 않는다.
### 항목은 변경할 수 없지만, 항목을 제거하고 새 항목을 추가할 수 있다.

newSet = set()          # set 내장 함수

# Set 객체 생성
carSet = { 'brand', 'model', 'year' }

print(type(carSet))     # <class 'set'>



"""한참 건너 뛴 후 """
### match: Python 3.10에서 도입된 match-case (switch-case와 비슷하다.)
''
score = int(input('학생 성적(0 ~ 100)을 입력하세요: '))
num = score // 10
match num:
    case 10 | 9: grade = 'A'    # case 조건에 | 를 사용하여 OR를 표현
    # case 9: grade = 'A'
    case 8: grade = 'B'
    case 7: grade = 'C'
    case 6: grade = 'D'
    case default: grade = 'F'
    # case _: grade = 'F'
print(f'당신의 학점은 {grade} 입니다.')
'''
### 변수를 바인딩(Binding)하는데 사용할 수 있다.
# print(f'y:{y}')
# NameError: name 'y' is not defined
flag = False

match (100, 200):
    case (100, 300):                    # Mismatch: 200 != 300
        print('Case 1: x(100), y(300)')
    # case (100, 200):                  # Matches
    #     print(f'Case 2: x(100), y(200)')
    case (100, 200) if flag:            # Successful match, but guard fails
        print('Case 2')
    case (100, y):                      # Matches and binds y to 200
        print(f'Case 3: x(100), y({y})')
    case _: # Pattern not attempted
        print('Case 4, I match anything!!!')

# print(f'y:{y}’)       # y:200



### 예외 처리 -- try, except, else, finally
sList = [10, 20, 30, 40, 50]

print('두 개의 정수를 입력하세요.')
try:
    a = int(input('a: '))
    b = int(input('b: '))
    res = a / b

# 여러 개의 오류 처리
except ZeroDivisionError as e:print(f'오류: {e}')   # 예외의 에러 메시지 받아오기
except IndexError as e:print(f'오류: {e}')          # 예외의 에러 메시지 받아오기
except FileNotFoundError:pass                       # 오류 회피

else:                           # try문 수행 중 오류가 없으면 else절이 수행된다.
    print(f'{a} / {b} = {a / b}')
finally:                        # 무조건 실행:Clean-up 작업 정의


# 함수의 반환 값은 오직 하나이다.
# 그래서 아래 파이썬 함수는 4개의 값이 하나의 '튜플'로 넘어온다
'''

def Cal(a, b) :
    return a+b, a-b, a*b, a/b

a = 10
b = 3
(13, 7, 30, 3.3333333333)

'''

### 사용자 정의 함수: 기본 매개변수
### 기본 매개 변수(Default Parameter Value)
### 인수 없이 함수를 호출하면 기본값을 사용한다.

def myFunc(num = 1) :
    for i in range(num) :
    print(f'{i}: Hello World!!!')

myFunc()            # myFunc(1)

def ADD(a, b = 20) :
    return a + b
# sum = ADD()       # TypeError
sum = ADD(10)       # sum = ADD(10, 50)
sum = ADD(10, 50)

'''

### 사용자 정의 함수: 임의의 인수
### 임의의 인수(Arbitrary Arguments): *args
### 함수에 전달할 인수의 수를 모르는 경우 함수 정의에서 매개변수 이름 앞에 *를
추가한다.

def myFunc(*args) :
    print(f'당신의 이름은 {args[2]} 입니다.’)

myFunc('홍길동', '이순신', ‘강감찬')

def myFunc(*args):
    for i in range(len(args)):
        print(f'당신의 이름은 {args[i]} 입니다.’)

myFunc('홍길동', '이순신', ‘강감찬')
